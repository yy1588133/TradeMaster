# ==================== TradeMaster 完整生态系统环境配置模板 ====================
# 该配置文件用于集成模式，同时运行TradeMaster核心和Web界面
# 使用方法: 复制此文件为.env，并填入实际配置值
# 启动命令: docker-compose -f docker-compose.yml -f docker-compose.extended.yml up -d

# ==================== 项目基础信息 ====================
# 项目版本和构建信息
VERSION=1.0.0
BUILD_DATE=2024-01-01T00:00:00Z
ENVIRONMENT=production

# ==================== TradeMaster 核心配置 ====================
# TradeMaster服务端口
TRADEMASTER_PORT=8080

# TradeMaster数据和工作目录
TRADEMASTER_DATA_ROOT=./data
TRADEMASTER_WORKSPACE=./workspace

# ==================== Web界面数据库配置 ====================
# Web界面专用PostgreSQL配置
WEB_POSTGRES_USER=trademaster
WEB_POSTGRES_PASSWORD=CHANGE_THIS_WEB_DB_PASSWORD_123!@#
WEB_POSTGRES_DB=trademaster_web

# ==================== Web界面安全配置 ====================
# Web界面JWT密钥
WEB_SECRET_KEY=CHANGE_THIS_TO_A_VERY_STRONG_RANDOM_SECRET_KEY_FOR_WEB_INTERFACE

# Web界面CORS配置
WEB_CORS_ORIGINS=http://localhost,https://your-domain.com

# ==================== 网关配置 ====================
# 统一网关端口配置
GATEWAY_HTTP_PORT=80
GATEWAY_HTTPS_PORT=443
TRADEMASTER_API_PORT=8080

# ==================== 前端应用配置 ====================
# React应用环境变量
REACT_APP_API_BASE_URL=http://localhost/api/v1
REACT_APP_WS_URL=ws://localhost/ws

# ==================== 数据存储配置 ====================
# 数据存储根目录
DATA_ROOT=./docker/volumes

# 数据卷挂载路径
POSTGRES_DATA_PATH=${DATA_ROOT}/web_postgres_data
POSTGRES_BACKUP_PATH=${DATA_ROOT}/web_postgres_backups
REDIS_DATA_PATH=${DATA_ROOT}/web_redis_data
BACKEND_DATA_PATH=${DATA_ROOT}/web_backend_data
BACKEND_LOGS_PATH=${DATA_ROOT}/web_backend_logs
BACKEND_UPLOADS_PATH=${DATA_ROOT}/web_backend_uploads
FRONTEND_LOGS_PATH=${DATA_ROOT}/web_frontend_logs
GATEWAY_LOGS_PATH=${DATA_ROOT}/gateway_logs

# ==================== 网络配置 ====================
# Docker网络配置
DOCKER_NETWORK_SUBNET=172.30.0.0/16
DOCKER_NETWORK_GATEWAY=172.30.0.1

# ==================== 监控配置（可选）====================
# 启用监控服务（取消注释以启用）
# ENABLE_MONITORING=true
# GRAFANA_ADMIN_USER=admin
# GRAFANA_ADMIN_PASSWORD=CHANGE_THIS_GRAFANA_PASSWORD_456!@#
# PROMETHEUS_PORT=9090
# GRAFANA_PORT=3001

# ==================== 时区配置 ====================
TZ=Asia/Shanghai

# ==================== 调试和开发配置 ====================
# 调试模式（生产环境建议设为false）
DEBUG=false
LOG_LEVEL=INFO

# 是否启用API文档（生产环境建议设为false）
ENABLE_DOCS=false

# ==================== 性能配置 ====================
# Nginx工作进程配置
NGINX_WORKER_PROCESSES=auto
NGINX_WORKER_CONNECTIONS=2048

# ==================== SSL配置（可选）====================
# 如果使用HTTPS，配置SSL证书路径
# SSL_CERT_PATH=./docker/nginx/ssl/cert.pem
# SSL_KEY_PATH=./docker/nginx/ssl/key.pem

# ==================== 备份配置（可选）====================
# 数据库备份保留天数
# BACKUP_RETENTION_DAYS=30

# ==================== 使用说明 ====================
#
# 1. 首次使用步骤:
#    - 复制此文件为 .env
#    - 修改所有 CHANGE_THIS 开头的配置项
#    - 确保数据目录存在: mkdir -p docker/volumes
#    - 启动服务: docker-compose -f docker-compose.yml -f docker-compose.extended.yml up -d
#
# 2. 服务访问地址:
#    - Web界面: http://localhost
#    - TradeMaster API: http://localhost:8080
#    - 统一网关: http://localhost (同时提供Web界面和API访问)
#
# 3. 监控访问地址（如果启用）:
#    - Grafana: http://localhost:3001
#    - Prometheus: http://localhost:9090
#
# 4. 重要安全提醒:
#    - 所有密码必须修改为强密码
#    - 生产环境必须配置HTTPS
#    - 定期备份数据库
#    - 监控系统资源使用情况
#
# 5. 常用管理命令:
#    - 查看服务状态: docker-compose ps
#    - 查看日志: docker-compose logs -f [service_name]
#    - 重启服务: docker-compose restart [service_name]
#    - 停止所有服务: docker-compose down
#    - 更新服务: docker-compose pull && docker-compose up -d
#