# ==================== TradeMaster Web Interface 开发环境配置 ====================
# 用于本地开发和调试的Docker Compose配置
# 启动命令: docker-compose -f docker-compose.dev.yml up -d

version: '3.8'

services:
  # ==================== 数据库服务 ====================
  postgres:
    image: postgres:15-alpine
    container_name: trademaster-postgres-dev
    hostname: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-trademaster_web}
      POSTGRES_USER: ${POSTGRES_USER:-trademaster}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
      TZ: Asia/Shanghai
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/postgres/init-dev.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./docker/postgres/dev-config.sql:/docker-entrypoint-initdb.d/02-config.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trademaster} -d ${POSTGRES_DB:-trademaster_web}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - trademaster-dev
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== Redis缓存服务 ====================
  redis:
    image: redis:7-alpine
    container_name: trademaster-redis-dev
    hostname: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_dev_data:/data
      - ./docker/redis/redis-dev.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - trademaster-dev
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== 后端API服务 ====================
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: development
      args:
        BUILD_ENV: development
        PIP_INDEX_URL: ${PIP_INDEX_URL:-https://pypi.org/simple/}
    container_name: trademaster-backend-dev
    hostname: backend
    restart: unless-stopped
    environment:
      # 基础配置
      PROJECT_NAME: "TradeMaster Web Interface (Dev)"
      VERSION: "1.0.0-dev"
      DEBUG: "true"
      LOG_LEVEL: "DEBUG"
      
      # 服务器配置
      SERVER_HOST: "0.0.0.0"
      SERVER_PORT: "8000"
      
      # 数据库配置 - 使用asyncpg异步驱动
      DATABASE_URL: "postgresql+asyncpg://${POSTGRES_USER:-trademaster}:${POSTGRES_PASSWORD:-dev_password_123}@postgres:5432/${POSTGRES_DB:-trademaster_web}"
      
      # Redis配置
      REDIS_URL: "redis://redis:6379/0"
      
      # 安全配置
      SECRET_KEY: "dev-secret-key-change-in-production"
      ACCESS_TOKEN_EXPIRE_MINUTES: "60"
      
      # CORS配置 - JSON数组格式以兼容Pydantic v2
      BACKEND_CORS_ORIGINS: '["http://localhost:3100","http://localhost:8080","http://127.0.0.1:3100"]'
      
      # TradeMaster集成
      TRADEMASTER_API_URL: "http://host.docker.internal:8080"
      TRADEMASTER_DATA_PATH: "/app/trademaster_data"
      
      # 开发特殊配置
      AUTO_RELOAD: "true"
      SHOW_ERROR_DETAILS: "true"
      ENABLE_DOCS: "true"
      
      # 时区
      TZ: Asia/Shanghai
    ports:
      - "${BACKEND_PORT:-8000}:8000"
      - "${BACKEND_DEBUG_PORT:-5678}:5678"  # debugpy端口
    volumes:
      # 源代码挂载（支持热重载）
      - ./backend/app:/app/app:rw
      - ./backend/alembic:/app/alembic:rw
      - ./backend/alembic.ini:/app/alembic.ini:rw
      
      # 数据目录（使用命名卷避免权限问题）
      - backend_dev_data:/app/data
      - backend_dev_logs:/app/logs
      - backend_dev_uploads:/app/uploads
      - backend_dev_temp:/app/temp
      
      # TradeMaster数据共享
      - ../data:/app/trademaster_data:ro
      - ../configs:/app/trademaster_configs:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/health-check.sh", "quick"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - trademaster-dev
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ==================== 前端开发服务 ====================
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: development
      args:
        BUILD_ENV: development
        REACT_APP_API_BASE_URL: "http://localhost:8000/api/v1"
        REACT_APP_WS_URL: "ws://localhost:8000/ws"
    container_name: trademaster-frontend-dev
    hostname: frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      REACT_APP_API_BASE_URL: "http://localhost:8000/api/v1"
      REACT_APP_WS_URL: "ws://localhost:8000/ws"
      CHOKIDAR_USEPOLLING: "true"  # 解决Docker文件监听问题
      WATCHPACK_POLLING: "true"
      TZ: Asia/Shanghai
    ports:
      - "${FRONTEND_PORT:-3100}:3000"
    volumes:
      # 源代码挂载（支持热重载）
      - ./frontend/src:/app/src:rw
      - ./frontend/public:/app/public:rw
      - ./frontend/index.html:/app/index.html:rw
      - ./frontend/vite.config.ts:/app/vite.config.ts:rw
      - ./frontend/tsconfig.json:/app/tsconfig.json:rw
      - ./frontend/package.json:/app/package.json:rw
      
      # 配置文件
      - ./frontend/.eslintrc.cjs:/app/.eslintrc.cjs:rw
      - ./frontend/.prettierrc:/app/.prettierrc:rw
      
      # node_modules缓存（提高性能）
      - frontend_dev_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - trademaster-dev
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== Nginx反向代理（开发用）====================
  nginx:
    image: nginx:alpine
    container_name: trademaster-nginx-dev
    hostname: nginx
    restart: unless-stopped
    environment:
      BACKEND_HOST: backend
      BACKEND_PORT: 8000
      FRONTEND_HOST: frontend
      FRONTEND_PORT: 3000
      TZ: Asia/Shanghai
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_dev_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - trademaster-dev
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== 开发工具服务 ====================
  # pgAdmin (数据库管理)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: trademaster-pgadmin-dev
    hostname: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@trademaster.dev}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      TZ: Asia/Shanghai
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - postgres
    networks:
      - trademaster-dev
    profiles:
      - tools
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Redis Commander (Redis管理)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: trademaster-redis-commander-dev
    hostname: redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379"
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin123}
      TZ: Asia/Shanghai
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    networks:
      - trademaster-dev
    profiles:
      - tools
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Mailhog (邮件测试)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: trademaster-mailhog-dev
    hostname: mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_WEB_PORT:-8025}:8025"  # Web界面
      - "${MAILHOG_SMTP_PORT:-1025}:1025"  # SMTP端口
    networks:
      - trademaster-dev
    profiles:
      - tools
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# ==================== 网络配置 ====================
networks:
  trademaster-dev:
    name: trademaster-dev-network
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: tm-dev-br0
      com.docker.network.driver.mtu: "1500"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# ==================== 数据卷配置 ====================
volumes:
  # 数据库数据
  postgres_dev_data:
    name: trademaster-postgres-dev-data
    driver: local

  # Redis数据
  redis_dev_data:
    name: trademaster-redis-dev-data
    driver: local

  # 后端日志
  backend_dev_logs:
    name: trademaster-backend-dev-logs
    driver: local

  # 后端数据卷
  backend_dev_data:
    name: trademaster-backend-dev-data
    driver: local

  # 后端上传文件
  backend_dev_uploads:
    name: trademaster-backend-dev-uploads
    driver: local

  # 后端临时文件
  backend_dev_temp:
    name: trademaster-backend-dev-temp
    driver: local

  # 前端node_modules
  frontend_dev_node_modules:
    name: trademaster-frontend-dev-node_modules
    driver: local

  # Nginx日志
  nginx_dev_logs:
    name: trademaster-nginx-dev-logs
    driver: local

  # pgAdmin数据
  pgadmin_dev_data:
    name: trademaster-pgadmin-dev-data
    driver: local