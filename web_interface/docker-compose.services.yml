# TradeMaster 数据库服务 Docker Compose 配置
# PostgreSQL + Redis 容器化服务配置，用于开发和生产环境

# Docker Compose配置 - 移除废弃的version属性以符合最新标准

services:
  # PostgreSQL 14 数据库服务
  postgresql:
    image: postgres:14-alpine
    container_name: trademaster-postgresql
    hostname: postgresql
    restart: unless-stopped
    
    # 环境变量配置
    environment:
      POSTGRES_DB: trademaster_web
      POSTGRES_USER: trademaster
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-TradeMaster2024!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      TZ: Asia/Shanghai
    
    # 端口映射 - 使用非标准端口避免冲突
    ports:
      - "15432:5432"  # PostgreSQL: 15432 -> 5432
    
    # 数据卷挂载
    volumes:
      # 数据持久化
      - postgresql_data:/var/lib/postgresql/data
      # 初始化脚本
      - ./scripts/init-postgresql.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    
    # 健康检查
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trademaster} -d ${POSTGRES_DB:-trademaster_web}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    
    # 网络配置
    networks:
      - trademaster_network
    
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis 7 缓存服务
  redis:
    image: redis:7-alpine
    container_name: trademaster-redis
    hostname: redis
    restart: unless-stopped
    
    # 环境变量
    environment:
      TZ: Asia/Shanghai
    
    # 启动命令 - 加载自定义配置
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-TradeMaster2024!}
    
    # 端口映射 - 使用非标准端口避免冲突
    ports:
      - "16379:6379"  # Redis: 16379 -> 6379
    
    # 数据卷挂载
    volumes:
      # 数据持久化
      - redis_data:/data
      # Redis配置文件
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    
    # 网络配置
    networks:
      - trademaster_network
    
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

# 数据卷定义
volumes:
  # PostgreSQL数据持久化 - 使用Docker管理的卷
  postgresql_data:
    name: trademaster-postgresql-data
    driver: local
  
  # Redis数据持久化 - 使用Docker管理的卷
  redis_data:
    name: trademaster-redis-data
    driver: local
  
  # 后端数据卷 - 与主配置文件保持一致
  backend_data:
    name: trademaster-backend-data
    driver: local
    
  backend_logs:
    name: trademaster-backend-logs
    driver: local
    
  backend_uploads:
    name: trademaster-backend-uploads
    driver: local
    
  backend_temp:
    name: trademaster-backend-temp
    driver: local
  
  # 前端数据卷
  frontend_node_modules:
    name: trademaster-frontend-node-modules
    driver: local
  
  # Nginx日志卷
  nginx_logs:
    name: trademaster-nginx-logs
    driver: local

# 网络定义
networks:
  trademaster_network:
    driver: bridge
    name: trademaster_network
    # 使用Docker自动分配网络地址，避免IP地址池冲突
    driver_opts:
      com.docker.network.bridge.name: trademaster_br

# 端口说明:
# PostgreSQL: 主机端口 15432 -> 容器端口 5432
# Redis: 主机端口 16379 -> 容器端口 6379
# 这些端口不太可能与系统现有服务冲突