# ==================== TradeMaster Web Interface 完整容器化部署配置 ====================
# 支持一键部署前后端、数据库服务的完整Docker Compose配置
# 启动命令: docker-compose up -d 或使用 quick-start.bat

# Docker Compose配置 - 移除废弃的version属性以符合最新标准

services:
  # ==================== PostgreSQL数据库服务 ====================
  postgresql:
    image: postgres:14-alpine
    container_name: trademaster-postgresql
    hostname: postgresql
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-trademaster_web}
      POSTGRES_USER: ${POSTGRES_USER:-trademaster}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-TradeMaster2024!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: Asia/Shanghai
    
    ports:
      - "${POSTGRES_PORT:-15432}:5432"  # 使用非常用端口避免冲突
    
    volumes:
      # 数据持久化
      - postgresql_data:/var/lib/postgresql/data
      # 初始化脚本
      - ./scripts/init-postgresql.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      # 配置文件
      - ./scripts/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trademaster} -d ${POSTGRES_DB:-trademaster_web}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    networks:
      - trademaster_network
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== Redis缓存服务 ====================
  redis:
    image: redis:7-alpine
    container_name: trademaster-redis
    hostname: redis
    restart: unless-stopped
    
    environment:
      TZ: Asia/Shanghai
    
    command: redis-server --requirepass ${REDIS_PASSWORD:-TradeMaster2024!}
    
    ports:
      - "${REDIS_PORT:-16379}:6379"  # 使用非常用端口避免冲突
    
    volumes:
      # 数据持久化
      - redis_data:/data
      # Redis配置文件（如果存在）
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-TradeMaster2024!}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    networks:
      - trademaster_network
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ==================== 后端API服务 ====================
  backend:
    build:
      context: ..  # 修改构建上下文到项目根目录以访问trademaster等文件
      dockerfile: web_interface/docker/backend/Dockerfile
      target: production  # 强制使用production构建，避免development阶段网络问题
      args:
        BUILD_ENV: ${BUILD_ENV:-development}
        PIP_INDEX_URL: ${PIP_INDEX_URL:-https://pypi.org/simple/}
        BUILDKIT_INLINE_CACHE: 1  # 启用构建缓存
      cache_from:
        - web_interface-backend:latest
    
    container_name: trademaster-backend
    hostname: backend
    restart: unless-stopped
    
    environment:
      # 基础配置
      PROJECT_NAME: "TradeMaster Web Interface"
      VERSION: ${VERSION:-1.0.0}
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
      
      # 服务器配置
      SERVER_HOST: "0.0.0.0"
      SERVER_PORT: "8000"
      
      # 数据库配置 (使用Docker服务名连接)
      DATABASE_URL: "postgresql+asyncpg://${POSTGRES_USER:-trademaster}:${POSTGRES_PASSWORD:-TradeMaster2024!}@postgresql:5432/${POSTGRES_DB:-trademaster_web}"
      POSTGRES_SERVER: "postgresql"
      POSTGRES_HOST: "postgresql"
      POSTGRES_PORT: "5432"
      
      # Redis配置 (使用Docker服务名连接)
      REDIS_URL: "redis://:${REDIS_PASSWORD:-TradeMaster2024!}@redis:6379/0"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD:-TradeMaster2024!}"
      REDIS_DB: "0"
      
      # 安全配置
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      
      # CORS配置
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-["http://localhost:3000","http://localhost:3001","http://localhost:8080"]}
      
      # TradeMaster集成
      TRADEMASTER_API_URL: ${TRADEMASTER_API_URL:-http://host.docker.internal:8080}
      TRADEMASTER_DATA_PATH: "/app/trademaster_data"
      
      # 开发配置
      AUTO_RELOAD: ${AUTO_RELOAD:-true}
      SHOW_ERROR_DETAILS: ${SHOW_ERROR_DETAILS:-true}
      ENABLE_DOCS: ${ENABLE_DOCS:-true}
      
      # 时区
      TZ: Asia/Shanghai
    
    ports:
      - "${BACKEND_PORT:-8000}:8000"
      - "${BACKEND_DEBUG_PORT:-5678}:5678"  # debugpy端口（开发模式）
    
    volumes:
      # 源代码挂载（开发模式支持热重载）
      - ./backend/app:/app/app:rw
      - ./backend/alembic:/app/alembic:rw
      - ./backend/alembic.ini:/app/alembic.ini:rw
      
      # 数据目录
      - backend_data:/app/data
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_temp:/app/temp
      
      # TradeMaster数据共享 (使用绝对路径指向项目根目录)
      - ../data:/app/trademaster_data:ro
      - ../configs:/app/trademaster_configs:ro
    
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    networks:
      - trademaster_network
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ==================== 前端Web服务 ====================
  frontend:
    build:
      context: ..  # 修改构建上下文到项目根目录
      dockerfile: web_interface/docker/frontend/Dockerfile
      target: ${BUILD_TARGET:-development}
      args:
        BUILD_ENV: ${BUILD_ENV:-development}
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000/api/v1}
        VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8000/ws}
        BUILDKIT_INLINE_CACHE: 1  # 启用构建缓存
      cache_from:
        - web_interface-frontend:latest
    
    container_name: trademaster-frontend
    hostname: frontend
    restart: unless-stopped
    
    environment:
      # Node.js环境
      NODE_ENV: ${NODE_ENV:-development}
      
      # API配置
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000/api/v1}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8000/ws}
      VITE_API_TIMEOUT: ${VITE_API_TIMEOUT:-30000}
      
      # 开发配置
      VITE_DEBUG: ${VITE_DEBUG:-true}
      VITE_DEBUG_API: ${VITE_DEBUG_API:-true}
      
      # 应用配置
      VITE_APP_NAME: "TradeMaster Web"
      VITE_APP_VERSION: ${VERSION:-1.0.0}
      
      # 文件监听配置（Docker特殊配置）
      CHOKIDAR_USEPOLLING: ${CHOKIDAR_USEPOLLING:-true}
      WATCHPACK_POLLING: ${WATCHPACK_POLLING:-true}
      
      # 时区
      TZ: Asia/Shanghai
    
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    
    volumes:
      # 源代码挂载（开发模式支持热重载）
      - ./frontend/src:/app/src:rw
      - ./frontend/public:/app/public:rw
      - ./frontend/index.html:/app/index.html:rw
      - ./frontend/vite.config.ts:/app/vite.config.ts:rw
      - ./frontend/tsconfig.json:/app/tsconfig.json:rw
      - ./frontend/package.json:/app/package.json:rw
      
      # 配置文件
      - ./frontend/.eslintrc.cjs:/app/.eslintrc.cjs:rw
      - ./frontend/.prettierrc:/app/.prettierrc:rw
      
      # node_modules缓存（提高性能）
      - frontend_node_modules:/app/node_modules
    
    depends_on:
      - backend
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    networks:
      - trademaster_network
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ==================== Nginx反向代理（可选）====================
  nginx:
    image: nginx:alpine
    container_name: trademaster-nginx
    hostname: nginx
    restart: unless-stopped
    
    environment:
      BACKEND_HOST: backend
      BACKEND_PORT: 8000
      FRONTEND_HOST: frontend
      FRONTEND_PORT: 3000
      TZ: Asia/Shanghai
    
    ports:
      - "${NGINX_PORT:-8080}:80"
    
    volumes:
      - ./web_interface/docker/nginx/gateway.conf:/etc/nginx/conf.d/default.conf:ro
      - ./web_interface/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      - backend
      - frontend
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    networks:
      - trademaster_network
    
    profiles:
      - nginx
      - gateway
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== 开发工具服务（可选）====================
  # pgAdmin数据库管理
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: trademaster-pgadmin
    hostname: pgadmin
    restart: unless-stopped
    
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@trademaster.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      TZ: Asia/Shanghai
    
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    
    volumes:
      - pgadmin_data:/var/lib/pgladmin
    
    depends_on:
      - postgresql
    
    networks:
      - trademaster_network
    
    profiles:
      - tools
      - pgadmin
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # Redis管理工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: trademaster-redis-commander
    hostname: redis-commander
    restart: unless-stopped
    
    environment:
      REDIS_HOSTS: "local:redis:6379:0:${REDIS_PASSWORD:-TradeMaster2024!}"
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin123}
      TZ: Asia/Shanghai
    
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    
    depends_on:
      - redis
    
    networks:
      - trademaster_network
    
    profiles:
      - tools
      - redis-tools
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# ==================== 网络配置 ====================
networks:
  trademaster_network:
    name: trademaster_network
    driver: bridge
    # 使用Docker自动分配网络地址，避免IP地址池冲突
    driver_opts:
      com.docker.network.bridge.name: trademaster_br
      com.docker.network.driver.mtu: "1500"

# ==================== 数据卷配置 ====================
volumes:
  # PostgreSQL数据持久化 - 使用Docker管理的卷（统一配置）
  postgresql_data:
    name: trademaster-postgresql-data
    driver: local

  # Redis数据持久化 - 使用Docker管理的卷（统一配置）
  redis_data:
    name: trademaster-redis-data
    driver: local

  # 后端数据卷 - 使用Docker管理的卷（统一配置）
  backend_data:
    name: trademaster-backend-data
    driver: local

  backend_logs:
    name: trademaster-backend-logs
    driver: local

  backend_uploads:
    name: trademaster-backend-uploads
    driver: local

  backend_temp:
    name: trademaster-backend-temp
    driver: local

  # 前端数据卷
  frontend_node_modules:
    name: trademaster-frontend-node-modules
    driver: local

  # Nginx日志 - 使用Docker管理的卷（统一配置）
  nginx_logs:
    name: trademaster-nginx-logs
    driver: local

  # pgAdmin数据
  pgadmin_data:
    name: trademaster-pgadmin-data
    driver: local

# ==================== 使用说明 ====================
# 1. 基础启动: docker-compose up -d
# 2. 开发模式启动: docker-compose --profile tools up -d
# 3. 包含Nginx网关: docker-compose --profile nginx up -d
# 4. 完整开发环境: docker-compose --profile tools --profile nginx up -d
# 
# 访问地址:
# - 前端: http://localhost:3000
# - 后端API: http://localhost:8000
# - API文档: http://localhost:8000/docs
# - Nginx网关: http://localhost:8080 (使用--profile nginx时)
# - pgAdmin: http://localhost:5050 (使用--profile tools时)
# - Redis Commander: http://localhost:8081 (使用--profile tools时)
#
# 停止服务: docker-compose down
# 停止并删除数据: docker-compose down -v