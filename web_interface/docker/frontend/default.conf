# ==================== TradeMaster Frontend 站点配置 ====================
# 前端应用和API代理的具体配置

server {
    listen 80;
    listen [::]:80;
    server_name localhost;
    
    # 根目录配置
    root /usr/share/nginx/html;
    index index.html index.htm;

    # 错误页面
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;

    # ==================== 安全配置 ====================
    # 隐藏Nginx版本
    server_tokens off;
    
    # 限制连接数
    limit_conn addr 20;
    
    # ==================== 日志配置 ====================
    access_log /var/log/nginx/frontend.access.log json_combined;
    error_log /var/log/nginx/frontend.error.log warn;

    # ==================== 健康检查端点 ====================
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # ==================== API代理配置 ====================
    # 后端API代理
    location /api/ {
        # 应用速率限制
        limit_req zone=api burst=20 nodelay;
        
        # 代理配置
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # 超时配置
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # 缓存控制
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_upgrade;
        
        # 错误处理
        proxy_intercept_errors on;
        error_page 502 503 504 = @backend_error;
    }

    # WebSocket代理配置
    location /ws/ {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket特殊配置
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;  # 24小时
        proxy_send_timeout 86400;
    }

    # ==================== 静态资源配置 ====================
    # 主应用文件
    location / {
        # 应用速率限制
        limit_req zone=static burst=50 nodelay;
        
        try_files $uri $uri/ /index.html;
        
        # 添加安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # HTML文件不缓存（确保始终获取最新版本）
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }
    }

    # JavaScript和CSS文件（带版本号的文件可以长期缓存）
    location ~* \.(js|css)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # 启用gzip
        gzip_static on;
    }

    # 图片和字体文件
    location ~* \.(png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 6M;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        
        # 图片压缩
        gzip_static on;
    }

    # 其他静态资源
    location ~* \.(json|xml|txt)$ {
        expires 1d;
        add_header Cache-Control "public";
    }

    # ==================== 特殊路径配置 ====================
    # Favicon
    location = /favicon.ico {
        log_not_found off;
        access_log off;
        expires 1M;
        add_header Cache-Control "public, immutable";
    }

    # Robots.txt
    location = /robots.txt {
        log_not_found off;
        access_log off;
        expires 1d;
        add_header Cache-Control "public";
    }

    # 禁止访问隐藏文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 禁止访问备份文件
    location ~* \.(bak|backup|old|orig|original|tmp)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # ==================== 错误处理 ====================
    # 后端错误处理
    location @backend_error {
        internal;
        add_header Content-Type application/json always;
        return 502 '{"error": "Backend service unavailable", "code": 502, "message": "Please try again later"}';
    }

    # 50x错误页面
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    # ==================== 开发环境特殊配置 ====================
    # 开发模式下的热重载支持（生产环境会被注释掉）
    # location /sockjs-node {
    #     proxy_pass http://frontend-dev:3000;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     proxy_set_header Host $host;
    #     proxy_cache_bypass $http_upgrade;
    # }
}

# ==================== HTTPS配置模板 ====================
# 生产环境启用HTTPS时取消注释并配置证书
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name your-domain.com;
#
#     # SSL证书配置
#     ssl_certificate /etc/ssl/certs/your-cert.pem;
#     ssl_certificate_key /etc/ssl/private/your-key.pem;
#     ssl_session_timeout 1d;
#     ssl_session_cache shared:SSL:50m;
#     ssl_session_tickets off;
#
#     # SSL安全配置
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#
#     # HSTS
#     add_header Strict-Transport-Security "max-age=63072000" always;
#
#     # 包含HTTP配置的其余部分
#     include /etc/nginx/conf.d/common.conf;
# }

# HTTP到HTTPS重定向
# server {
#     listen 80;
#     listen [::]:80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }