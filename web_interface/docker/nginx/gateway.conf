# ==================== TradeMaster 统一网关配置 ====================
# 该配置将TradeMaster核心API和Web界面统一在一个端口下提供服务

server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # 根目录配置
    root /usr/share/nginx/html;
    index index.html index.htm;

    # 安全配置
    server_tokens off;
    
    # 限制连接数
    limit_conn addr 50;
    
    # 日志配置
    access_log /var/log/nginx/gateway.access.log json_combined;
    error_log /var/log/nginx/gateway.error.log warn;

    # ==================== 健康检查端点 ====================
    location /health {
        access_log off;
        return 200 "healthy - TradeMaster Gateway\n";
        add_header Content-Type text/plain;
    }

    # 网关状态信息
    location /gateway/status {
        access_log off;
        default_type application/json;
        return 200 '{"status":"ok","service":"TradeMaster Gateway","timestamp":"$time_iso8601","version":"1.0.0"}';
    }

    # ==================== TradeMaster 核心API代理 ====================
    # TradeMaster Flask API (保持原有接口)
    location /trademaster/api/ {
        # 应用速率限制
        limit_req zone=api burst=30 nodelay;
        
        # 代理到TradeMaster核心服务
        proxy_pass http://trademaster-core:8080/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Original-URI $request_uri;
        
        # 超时配置
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # 缓存控制
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_upgrade;
        
        # 错误处理
        proxy_intercept_errors on;
        error_page 502 503 504 = @trademaster_error;
        
        # 添加CORS头
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
    }

    # TradeMaster核心直接访问（兼容性）
    location /api/trademaster/ {
        # 重写URL并代理
        rewrite ^/api/trademaster/(.*)$ /$1 break;
        proxy_pass http://trademaster-core:8080;
        
        # 其他配置同上
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # ==================== Web界面API代理 ====================
    # Web界面后端API
    location /api/v1/ {
        # 应用速率限制
        limit_req zone=api burst=50 nodelay;
        
        # 代理到Web后端服务
        proxy_pass http://web-backend:8000/api/v1/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Original-URI $request_uri;
        
        # 超时配置
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 缓存控制
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_upgrade;
        
        # 错误处理
        proxy_intercept_errors on;
        error_page 502 503 504 = @web_backend_error;
    }

    # WebSocket支持
    location /ws/ {
        proxy_pass http://web-backend:8000/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket特殊配置
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;  # 24小时
        proxy_send_timeout 86400;
    }

    # ==================== Web界面前端静态文件 ====================
    # 前端应用静态资源
    location /static/ {
        # 应用速率限制
        limit_req zone=static burst=100 nodelay;
        
        # 代理到前端服务
        proxy_pass http://web-frontend:80/static/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # 缓存配置
        proxy_cache static_cache;
        proxy_cache_valid 200 1d;
        proxy_cache_use_stale error timeout invalid_header updating;
        
        # 添加缓存头
        add_header X-Cache-Status $upstream_cache_status;
    }

    # 前端资源文件（JS, CSS等）
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # 应用速率限制
        limit_req zone=static burst=200 nodelay;
        
        # 代理到前端服务
        proxy_pass http://web-frontend:80;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        
        # 长期缓存
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # 缓存配置
        proxy_cache static_cache;
        proxy_cache_valid 200 7d;
    }

    # ==================== 路由配置 ====================
    # 管理界面路由
    location /admin {
        # 应用速率限制
        limit_req zone=static burst=20 nodelay;
        
        # 代理到前端服务
        proxy_pass http://web-frontend:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 认证检查（可选）
        # auth_request /auth;
        
        # 无缓存
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Web界面主页和SPA路由
    location / {
        # 应用速率限制
        limit_req zone=static burst=30 nodelay;
        
        # 首先尝试直接访问文件，然后fallback到前端服务
        try_files $uri @frontend;
    }

    # 前端服务代理
    location @frontend {
        proxy_pass http://web-frontend:80;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SPA路由支持
        proxy_intercept_errors on;
        error_page 404 = @spa_fallback;
    }

    # SPA fallback处理
    location @spa_fallback {
        proxy_pass http://web-frontend:80/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 添加缓存控制
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # ==================== 特殊路径和安全配置 ====================
    # 禁止访问隐藏文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 禁止访问备份文件
    location ~* \.(bak|backup|old|orig|original|tmp|swp)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 禁止访问配置文件
    location ~* \.(conf|config|ini|env)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Favicon处理
    location = /favicon.ico {
        proxy_pass http://web-frontend:80/favicon.ico;
        log_not_found off;
        access_log off;
        expires 1M;
        add_header Cache-Control "public, immutable";
    }

    # Robots.txt处理
    location = /robots.txt {
        proxy_pass http://web-frontend:80/robots.txt;
        log_not_found off;
        access_log off;
        expires 1d;
        add_header Cache-Control "public";
    }

    # ==================== 错误处理 ====================
    # TradeMaster核心错误处理
    location @trademaster_error {
        internal;
        add_header Content-Type application/json always;
        return 502 '{"error": "TradeMaster core service unavailable", "code": 502, "message": "Please check TradeMaster service status"}';
    }

    # Web后端错误处理
    location @web_backend_error {
        internal;
        add_header Content-Type application/json always;
        return 502 '{"error": "Web backend service unavailable", "code": 502, "message": "Please try again later"}';
    }

    # 通用错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }

    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# ==================== TradeMaster API专用端口 ====================
# 为了兼容性，在8080端口提供TradeMaster API的直接访问
server {
    listen 8080;
    listen [::]:8080;
    server_name _;
    
    # 日志配置
    access_log /var/log/nginx/trademaster-api.access.log main;
    error_log /var/log/nginx/trademaster-api.error.log warn;

    # 健康检查
    location /health {
        access_log off;
        return 200 "healthy - TradeMaster API\n";
        add_header Content-Type text/plain;
    }

    # 直接代理到TradeMaster核心
    location / {
        limit_req zone=api burst=50 nodelay;
        
        proxy_pass http://trademaster-core:8080;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # CORS支持
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        
        # OPTIONS请求处理
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
}