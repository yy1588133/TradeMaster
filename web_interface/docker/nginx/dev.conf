# ==================== TradeMaster 开发环境 Nginx 配置 ====================
# 专为开发环境设计的负载均衡和反向代理配置
# 支持热重载、详细日志记录和开发调试功能

server {
    listen 80;
    listen [::]:80;
    server_name localhost 127.0.0.1 *.localhost;
    
    # 根目录配置
    root /usr/share/nginx/html;
    index index.html index.htm;

    # 错误页面
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;

    # ==================== 安全配置（开发环境相对宽松）====================
    server_tokens off;
    
    # 开发环境允许更多连接
    limit_conn addr 50;
    
    # ==================== 日志配置（开发环境详细日志）====================
    access_log /var/log/nginx/dev.access.log json_combined;
    error_log /var/log/nginx/dev.error.log debug;

    # ==================== CORS配置（开发环境支持）====================
    # 添加CORS头以支持前端开发服务器
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
    add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # ==================== 健康检查端点 ====================
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Nginx状态端点（仅开发环境）
    location /nginx-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 172.16.0.0/12;
        deny all;
    }

    # ==================== API代理配置 ====================
    # 后端API代理（开发环境配置）
    location /api/ {
        # 开发环境宽松的速率限制
        limit_req zone=api burst=50 nodelay;
        
        # OPTIONS预检请求处理
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Type "text/plain; charset=utf-8";
            add_header Content-Length 0;
            return 204;
        }
        
        # 代理到后端服务器
        proxy_pass http://${BACKEND_HOST}:${BACKEND_PORT};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # 开发环境较长的超时时间
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 禁用缓存以获取最新数据
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_upgrade;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # 错误处理
        proxy_intercept_errors on;
        error_page 502 503 504 = @backend_error;
    }

    # WebSocket代理配置（支持开发时的热重载）
    location /ws/ {
        proxy_pass http://${BACKEND_HOST}:${BACKEND_PORT};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket特殊配置
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;  # 24小时
        proxy_send_timeout 86400;
        
        # 添加CORS头
        add_header Access-Control-Allow-Origin "*" always;
    }

    # ==================== 前端开发服务器代理 ====================
    # 代理到前端开发服务器（如果独立运行）
    location /dev/ {
        proxy_pass http://${FRONTEND_HOST}:${FRONTEND_PORT}/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 支持热重载
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    # 前端热重载WebSocket支持
    location /sockjs-node/ {
        proxy_pass http://${FRONTEND_HOST}:${FRONTEND_PORT};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Webpack HMR支持
    location /__webpack_hmr {
        proxy_pass http://${FRONTEND_HOST}:${FRONTEND_PORT};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Vite HMR支持
    location /@vite/client {
        proxy_pass http://${FRONTEND_HOST}:${FRONTEND_PORT};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # ==================== 静态资源配置（开发环境）====================
    # 主应用文件
    location / {
        # 开发环境宽松的速率限制
        limit_req zone=static burst=100 nodelay;
        
        try_files $uri $uri/ @frontend;
        
        # 开发环境安全头（相对宽松）
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        # 开发环境禁用缓存
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }

    # 前端回退处理
    location @frontend {
        proxy_pass http://${FRONTEND_HOST}:${FRONTEND_PORT};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 禁用缓存
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_upgrade;
    }

    # 静态资源（开发环境不缓存）
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        try_files $uri @frontend;
        
        # 开发环境不缓存静态资源
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        
        # 添加CORS头
        add_header Access-Control-Allow-Origin "*" always;
    }

    # ==================== 开发工具端点 ====================
    # Source maps支持
    location ~* \.map$ {
        try_files $uri @frontend;
        add_header Cache-Control "no-cache" always;
    }

    # 开发环境调试信息
    location /debug-info {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{
            "environment": "development",
            "backend": "${BACKEND_HOST}:${BACKEND_PORT}",
            "frontend": "${FRONTEND_HOST}:${FRONTEND_PORT}",
            "timestamp": "$time_iso8601",
            "server": "$server_name",
            "version": "dev"
        }';
    }

    # ==================== 特殊路径配置 ====================
    # Favicon（开发环境）
    location = /favicon.ico {
        try_files $uri @frontend;
        log_not_found off;
        access_log off;
        add_header Cache-Control "no-cache";
    }

    # Robots.txt（开发环境）
    location = /robots.txt {
        try_files $uri @frontend;
        log_not_found off;
        access_log off;
        add_header Cache-Control "no-cache";
    }

    # 开发环境允许访问dotfiles（用于调试）
    location ~ /\. {
        try_files $uri @frontend;
        log_not_found off;
    }

    # ==================== 错误处理 ====================
    # 后端错误处理
    location @backend_error {
        internal;
        add_header Content-Type application/json always;
        add_header Access-Control-Allow-Origin "*" always;
        return 502 '{
            "error": "Backend service unavailable", 
            "code": 502, 
            "message": "Backend service is not available. Please check if the backend container is running.",
            "environment": "development",
            "timestamp": "$time_iso8601"
        }';
    }

    # 50x错误页面
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    # ==================== 开发环境监控端点 ====================
    # 实时日志查看（仅开发环境）
    location /dev-logs {
        access_log off;
        allow 127.0.0.1;
        allow 172.16.0.0/12;
        deny all;
        
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache";
        
        # 返回最近的日志
        return 200 "Development logs endpoint - check /var/log/nginx/ for detailed logs";
    }

    # 配置重载端点（仅开发环境）
    location /dev-reload {
        access_log off;
        allow 127.0.0.1;
        allow 172.16.0.0/12;
        deny all;
        
        add_header Content-Type application/json;
        return 200 '{"message": "To reload config: docker-compose restart nginx", "status": "info"}';
    }
}