# ==================== TradeMaster Docker 完整版依赖 ====================
# 包含TradeMaster核心功能所需的所有依赖，支持完整的量化交易功能
# 构建时间较长但功能完整，推荐生产环境使用

# ==================== 核心框架 ====================
fastapi==0.104.1
uvicorn[standard]==0.24.0
python-multipart==0.0.6

# ==================== 数据库相关 ====================
sqlalchemy==2.0.23
asyncpg==0.29.0
alembic==1.12.1

# ==================== 缓存和队列 ====================
redis==5.0.1
celery==5.3.4

# ==================== 安全认证 ====================
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4

# ==================== 数据验证和序列化 ====================
pydantic==2.5.0
pydantic-settings==2.1.0
email-validator==2.1.0

# ==================== HTTP客户端 ====================
httpx==0.25.2
aiofiles==23.2.1

# ==================== 配置管理 ====================
python-decouple==3.8
python-dotenv==1.0.0

# ==================== 日志系统 ====================
loguru==0.7.2

# ==================== 科学计算基础 ====================
numpy>=1.24.0,<2.0
pandas>=2.0.0,<2.2

# ==================== 机器学习核心框架 ====================
# PyTorch生态 - CPU版本，适合Docker环境
torch>=2.1.0,<2.3
torchvision>=0.16.0,<0.18
torchaudio>=2.1.0,<2.3

# TensorFlow - CPU版本
tensorflow>=2.13.0,<2.16
tensorflow-cpu>=2.13.0,<2.16

# 科学计算
scipy>=1.10.0,<1.12
scikit-learn>=1.3.0,<1.4

# ==================== 数据可视化 ====================
matplotlib>=3.7.0,<3.9
plotly>=5.15.0,<5.18
seaborn>=0.12.0,<0.14

# ==================== 计算机视觉 ====================
opencv-python-headless>=4.8.0,<4.9
Pillow>=9.5.0,<10.1

# ==================== TradeMaster专用依赖 ====================
# MMEngine生态
mmengine>=0.10.1,<0.11
mmcv>=2.1.0,<2.3

# 时间序列分析
tslearn>=0.6.0,<0.7
statsmodels>=0.14.0,<0.15
fastdtw>=0.3.4

# 强化学习环境
gym>=0.26.0,<0.27
gymnasium>=1.0.0,<1.3

# 数据处理工具
prettytable==3.16.0
iopath>=0.1.9,<0.2

# ==================== 工具库 ====================
click==8.1.7
typer==0.9.0
rich==13.7.0
tqdm>=4.65.0,<4.67
python-dateutil==2.8.2

# ==================== 监控和调试 ====================
psutil==5.9.6

# ==================== 部署相关 ====================
gunicorn==21.2.0
watchfiles==0.21.0

# ==================== 测试框架 ====================
pytest==7.4.3
pytest-asyncio==0.21.1

# ==================== 优化说明 ====================
# 1. 使用CPU版本的深度学习框架，适合容器环境
# 2. 固定版本范围，确保兼容性
# 3. 使用opencv-python-headless减少依赖
# 4. 优化构建顺序，大包在前面以利用Docker层缓存