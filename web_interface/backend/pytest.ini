# ==================== TradeMaster Backend Pytest 配置 ====================
# Pytest 测试框架配置文件

[tool:pytest]
# 测试目录
testpaths = tests

# 测试文件匹配模式
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# 最小版本要求
minversion = 7.0

# 默认参数
addopts = 
    # 详细输出
    -ra
    # 严格标记模式
    --strict-markers
    # 严格配置模式
    --strict-config
    # 显示本地变量
    --tb=short
    # 并行执行
    -n auto
    # 覆盖率配置
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    # 覆盖率阈值
    --cov-fail-under=80
    # 性能相关
    --benchmark-skip
    # 警告处理
    --disable-warnings
    # 输出格式
    --color=yes

# 测试标记定义
markers =
    # 测试类型标记
    unit: 单元测试 - 测试单个函数或类
    integration: 集成测试 - 测试多个组件交互
    e2e: 端到端测试 - 测试完整用户流程
    api: API测试 - 测试API端点
    
    # 依赖服务标记
    database: 需要数据库连接的测试
    redis: 需要Redis连接的测试
    external: 需要外部服务的测试
    trademaster: 需要TradeMaster服务的测试
    
    # 性能测试标记
    slow: 慢速测试 (>1秒)
    fast: 快速测试 (<100ms)
    performance: 性能基准测试
    
    # 特定功能标记
    auth: 认证相关测试
    api_keys: API密钥相关测试
    strategies: 策略相关测试
    training: 训练相关测试
    analysis: 分析相关测试
    websocket: WebSocket相关测试
    
    # 环境标记
    dev: 仅在开发环境运行
    prod: 仅在生产环境运行
    ci: 仅在CI环境运行
    
    # 跳过条件标记
    skip_ci: 在CI环境中跳过
    skip_windows: 在Windows环境中跳过
    skip_linux: 在Linux环境中跳过
    skip_mac: 在macOS环境中跳过

# 日志配置
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# 文件日志
log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# 警告过滤
filterwarnings =
    # 忽略常见警告
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    
    # SQLAlchemy 警告
    ignore:.*SAWarning.*:sqlalchemy.exc.SAWarning
    
    # Pydantic 警告
    ignore:.*pydantic.*:UserWarning
    
    # FastAPI 警告
    ignore:.*fastapi.*:UserWarning
    
    # 测试相关警告
    ignore:.*pytest.*:PytestUnraisableExceptionWarning
    ignore:.*asyncio.*:DeprecationWarning

# 异步测试配置
asyncio_mode = auto

# Pytest-xdist 并行测试配置
# 根据CPU核心数自动决定进程数
# 可以通过 -n 参数覆盖，例如: pytest -n 4

# 测试发现配置
collect_ignore = [
    "setup.py"
]

# 递归搜索测试
norecursedirs = .git .tox .env venv env dist build south_migrations __pycache__ *.egg node_modules

# 测试会话配置
# 在测试会话开始时设置
python_paths = .

# 缓存配置
cache_dir = .pytest_cache

# 测试输出配置
console_output_style = progress
junit_family = xunit2
junit_logging = system-out
junit_log_passing_tests = true
junit_suite_name = TradeMaster_Backend_Tests

# 超时配置 (需要 pytest-timeout 插件)
timeout = 300
timeout_method = thread

# Mock 配置
mock_use_standalone_module = true

# 测试数据配置
# 用于 pytest-factoryboy
factory_for = app.tests.factories

# 数据库测试配置
# 测试时使用内存数据库或者独立的测试数据库
database_url = sqlite:///test.db

# 并发测试配置
# 控制异步测试的行为
trio_mode = true

# 基准测试配置 (pytest-benchmark)
benchmark_min_time = 0.000005
benchmark_max_time = 1.0
benchmark_min_rounds = 5
benchmark_timer = time.perf_counter
benchmark_disable_gc = true
benchmark_warmup = false
benchmark_warmup_iterations = 100000
benchmark_skip = false

# Hypothesis 配置 (属性测试)
hypothesis_verbosity = normal
hypothesis_profile = default

# 测试报告配置
html_report = reports/pytest_report.html
json_report = reports/pytest_report.json
xml_report = reports/pytest_report.xml

# 自定义配置
# TradeMaster 特定配置
trademaster_api_url = http://localhost:8080
trademaster_timeout = 30

# 测试环境变量
env = 
    TESTING = 1
    DEBUG = 1
    DATABASE_URL = sqlite:///test.db
    REDIS_URL = redis://localhost:6379/1
    SECRET_KEY = test-secret-key-for-testing-only
    ACCESS_TOKEN_EXPIRE_MINUTES = 30
    TRADEMASTER_API_URL = http://localhost:8080

# ==================== 使用说明 ====================
#
# 常用命令:
# pytest                          # 运行所有测试
# pytest tests/unit/              # 运行单元测试
# pytest tests/integration/       # 运行集成测试
# pytest -m "not slow"            # 跳过慢速测试
# pytest -m "unit and not database" # 运行不需要数据库的单元测试
# pytest --cov-report=html        # 生成HTML覆盖率报告
# pytest -v                       # 详细输出
# pytest -s                       # 显示print输出
# pytest --tb=long                # 详细错误信息
# pytest --lf                     # 只运行上次失败的测试
# pytest --ff                     # 先运行上次失败的测试
# pytest -x                       # 遇到第一个失败就停止
# pytest --maxfail=2              # 最多允许2个失败
# pytest -k "test_user"           # 运行名称包含test_user的测试
# pytest --collect-only           # 只收集测试，不运行
# pytest --setup-show             # 显示fixture设置
# pytest --markers                # 显示所有标记
#
# 并行测试:
# pytest -n 4                     # 使用4个进程
# pytest -n auto                  # 自动决定进程数
#
# 覆盖率:
# pytest --cov=app --cov-report=term-missing
# pytest --cov=app --cov-report=html
# pytest --cov=app --cov-branch   # 分支覆盖率
#
# 性能测试:
# pytest --benchmark-only         # 只运行基准测试
# pytest --benchmark-skip         # 跳过基准测试
#
# 调试:
# pytest --pdb                    # 失败时进入调试器
# pytest --pdbcls=IPython.terminal.debugger:Pdb  # 使用IPython调试器