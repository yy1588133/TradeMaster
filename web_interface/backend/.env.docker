# ==================== TradeMaster Docker 环境配置 ====================
# Docker方案专用环境变量配置
# 使用非标准端口避免冲突

# ==================== 基础应用配置 ====================
APP_NAME=TradeMaster Web Backend
APP_VERSION=1.0.0
DEBUG=true
LOG_LEVEL=INFO
ENVIRONMENT=development

# ==================== 服务器配置 ====================
SERVER_HOST=0.0.0.0
SERVER_PORT=8000
API_V1_STR=/api/v1

# ==================== PostgreSQL 数据库配置 (Docker) ====================
# 使用Docker容器服务名和非标准端口
DATABASE_URL=postgresql+asyncpg://trademaster:TradeMaster2024!@localhost:15432/trademaster_web
DB_HOST=localhost
DB_PORT=15432
DB_USER=trademaster
DB_PASSWORD=TradeMaster2024!
DB_NAME=trademaster_web

# 数据库连接池配置 (Docker优化)
DB_POOL_SIZE=10
DB_MAX_OVERFLOW=20
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=3600
DB_ECHO=false

# ==================== Redis 缓存配置 (Docker) ====================
# 使用Docker容器服务名和非标准端口
REDIS_URL=redis://:TradeMaster2024!@localhost:16379/0
REDIS_HOST=localhost
REDIS_PORT=16379
REDIS_DB=0
REDIS_PASSWORD=TradeMaster2024!
REDIS_SSL=false

# Redis连接池配置
REDIS_MAX_CONNECTIONS=20
REDIS_CONNECTION_TIMEOUT=10
REDIS_SOCKET_TIMEOUT=10

# 缓存策略配置
CACHE_DEFAULT_EXPIRE=3600
CACHE_PREFIX=trademaster:docker:
CACHE_ENABLED=true

# ==================== JWT 安全配置 ====================
SECRET_KEY=docker_development_secret_key_change_in_production_very_long_and_secure
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=60
REFRESH_TOKEN_EXPIRE_DAYS=7

# ==================== CORS 配置 ====================
BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:3001","http://127.0.0.1:3000","http://127.0.0.1:3001"]
CORS_ALLOW_CREDENTIALS=true

# ==================== Celery 异步任务配置 (Docker) ====================
# 使用Redis不同数据库进行任务队列
CELERY_BROKER_URL=redis://:TradeMaster2024!@localhost:16379/2
CELERY_RESULT_BACKEND=redis://:TradeMaster2024!@localhost:16379/3
CELERY_TASK_SERIALIZER=json
CELERY_RESULT_SERIALIZER=json

# ==================== TradeMaster 集成配置 ====================
TRADEMASTER_API_URL=http://localhost:8080
TRADEMASTER_API_TIMEOUT=300
TRADEMASTER_API_RETRY_ATTEMPTS=3

# ==================== 文件存储配置 ====================
UPLOAD_DIR=uploads
DATA_DIR=data
MODEL_DIR=models
LOG_DIR=logs
MAX_UPLOAD_SIZE=104857600

# ==================== 开发调试配置 ====================
# Docker开发环境专用设置
AUTO_RELOAD=true
SHOW_ERROR_DETAILS=true
ENABLE_API_DOCS=true
ENABLE_SWAGGER_UI=true
ENABLE_REDOC=true

# 数据库调试
SQLALCHEMY_LOG_LEVEL=INFO
SQL_DEBUG=false

# ==================== 监控配置 ====================
ENABLE_METRICS=true
METRICS_PORT=9090
HEALTH_CHECK_ENABLED=true
SENTRY_ENABLED=false

# ==================== Docker 特定配置 ====================
# Docker容器内部配置
DOCKER_DEPLOYMENT=true
CONTAINER_TIMEZONE=Asia/Shanghai

# 数据库连接等待配置
WAIT_FOR_DB=true
DB_STARTUP_TIMEOUT=60

# 日志配置 (Docker容器化)
LOG_FORMAT=json
LOG_FILE_ENABLED=false  # Docker使用stdout
CONSOLE_LOG_ENABLED=true

# ==================== 端口说明 ====================
# PostgreSQL: 主机端口15432 -> Docker容器5432
# Redis: 主机端口16379 -> Docker容器6379
# FastAPI: 主机端口8000 -> 应用端口8000
# 
# 这些非标准端口设计避免与系统现有服务冲突:
# - 标准PostgreSQL端口5432可能被系统PostgreSQL占用
# - 标准Redis端口6379可能被系统Redis占用
# - 使用15432/16379这样的端口号降低冲突概率

# ==================== Docker Compose 服务发现 ====================
# 在Docker Compose网络中，可以使用服务名进行连接:
# PostgreSQL: postgresql:5432 (容器间通信)
# Redis: redis:6379 (容器间通信)
# 
# 当前配置使用localhost是为了支持本地开发测试
# 生产环境部署时可以修改为服务名连接