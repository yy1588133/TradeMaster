# ==================== TradeMaster Web Interface Pre-commit 配置 ====================
# Pre-commit hooks 配置文件
# 在提交代码前自动运行代码质量检查和格式化

repos:
  # ==================== 通用 Hooks ====================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # 基础文件检查
      - id: trailing-whitespace
        name: 移除行尾空白
        description: 移除行尾的空白字符
        exclude: ^(.*\.md|.*\.txt)$
      - id: end-of-file-fixer
        name: 确保文件以换行符结尾
        description: 确保所有文件以单个换行符结尾
      - id: check-merge-conflict
        name: 检查合并冲突标记
        description: 检查文件中是否包含合并冲突标记
      - id: check-added-large-files
        name: 检查大文件
        description: 防止添加大文件到仓库
        args: ['--maxkb=1000']
      
      # JSON/YAML 检查
      - id: check-json
        name: 检查JSON语法
        description: 验证JSON文件语法正确性
      - id: check-yaml
        name: 检查YAML语法
        description: 验证YAML文件语法正确性
        args: ['--unsafe']
      - id: check-toml
        name: 检查TOML语法
        description: 验证TOML文件语法正确性
      
      # 其他检查
      - id: check-case-conflict
        name: 检查文件名大小写冲突
        description: 检查文件名是否存在大小写冲突
      - id: check-symlinks
        name: 检查损坏的符号链接
        description: 检查是否存在损坏的符号链接
      - id: check-executables-have-shebangs
        name: 检查可执行文件的shebang
        description: 确保可执行文件包含shebang
      - id: mixed-line-ending
        name: 统一行尾符
        description: 统一文件的行尾符
        args: ['--fix=lf']

  # ==================== Python 代码质量 ====================
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        name: Black 代码格式化
        description: 使用 Black 格式化 Python 代码
        language_version: python3
        files: ^web_interface/backend/
        args: ['--config', 'pyproject.toml']

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: isort 导入排序
        description: 使用 isort 排序 Python 导入语句
        files: ^web_interface/backend/
        args: ['--settings-path=pyproject.toml']

  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        name: Flake8 代码检查
        description: 使用 Flake8 进行 Python 代码风格检查
        files: ^web_interface/backend/
        args: ['--config=web_interface/backend/.flake8']
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        name: MyPy 类型检查
        description: 使用 MyPy 进行 Python 类型检查
        files: ^web_interface/backend/
        args: ['--config-file=pyproject.toml']
        additional_dependencies:
          - types-redis
          - types-python-dateutil
          - types-requests
          - types-PyYAML

  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Bandit 安全检查
        description: 使用 Bandit 进行 Python 安全检查
        files: ^web_interface/backend/
        args: ['-c', 'pyproject.toml']
        exclude: ^web_interface/backend/tests/

  # ==================== JavaScript/TypeScript 代码质量 ====================
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.55.0
    hooks:
      - id: eslint
        name: ESLint 代码检查
        description: 使用 ESLint 进行 JavaScript/TypeScript 代码检查
        files: ^web_interface/frontend/src/.*\.(js|jsx|ts|tsx)$
        types: [file]
        args: ['--fix', '--max-warnings=0']
        additional_dependencies:
          - '@typescript-eslint/eslint-plugin@^6.10.0'
          - '@typescript-eslint/parser@^6.10.0'
          - 'eslint-plugin-react@^7.33.0'
          - 'eslint-plugin-react-hooks@^4.6.0'
          - 'eslint-plugin-import@^2.29.0'
          - 'eslint-config-prettier@^9.0.0'
          - 'eslint-plugin-jsx-a11y@^6.8.0'

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        name: Prettier 代码格式化
        description: 使用 Prettier 格式化前端代码
        files: ^web_interface/frontend/src/.*\.(js|jsx|ts|tsx|json|css|less|md)$
        args: ['--config', 'web_interface/frontend/.prettierrc']

  # ==================== 文档检查 ====================
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        name: Markdown 格式检查
        description: 检查 Markdown 文件格式
        args: ['--fix']
        exclude: ^(CHANGELOG\.md|web_interface/.*\.md)$

  # ==================== 提交消息检查 ====================
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        name: 提交消息格式检查
        description: 检查提交消息是否符合规范
        stages: [commit-msg]

  # ==================== 密钥和敏感信息检查 ====================
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: 检测敏感信息
        description: 检测代码中的敏感信息和密钥
        args: ['--baseline', '.secrets.baseline']
        exclude: |
          (?x)^(
            .*\.lock$|
            .*package-lock\.json$|
            .*poetry\.lock$|
            .*yarn\.lock$|
            .*pnpm-lock\.yaml$|
            .*\.secrets\.baseline$
          )$

  # ==================== Docker 文件检查 ====================
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Dockerfile 检查
        description: 使用 Hadolint 检查 Dockerfile
        files: ^.*Dockerfile.*$
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']

  # ==================== Shell 脚本检查 ====================
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Shell 脚本检查
        description: 使用 ShellCheck 检查 Shell 脚本
        files: \.(sh|bash)$
        args: ['-e', 'SC1091', '-e', 'SC2034']

  # ==================== 自定义本地 Hooks ====================
  - repo: local
    hooks:
      # Python 测试
      - id: pytest-backend
        name: 后端测试
        description: 运行后端 Python 测试
        entry: bash -c 'cd web_interface/backend && python -m pytest tests/ --maxfail=1 -q'
        language: system
        files: ^web_interface/backend/(app|tests)/.*\.py$
        pass_filenames: false

      # TypeScript 类型检查
      - id: typescript-check
        name: TypeScript 类型检查
        description: 运行 TypeScript 类型检查
        entry: bash -c 'cd web_interface/frontend && npm run type-check'
        language: system
        files: ^web_interface/frontend/src/.*\.(ts|tsx)$
        pass_filenames: false

      # 检查环境变量文件
      - id: check-env-files
        name: 检查环境变量文件
        description: 验证环境变量文件格式
        entry: python3 scripts/check_env_files.py
        language: system
        files: ^.*\.env.*$
        pass_filenames: true

      # 检查API文档同步
      - id: check-api-docs
        name: 检查API文档同步
        description: 确保API文档与代码同步
        entry: bash -c 'cd web_interface/backend && python scripts/check_api_docs.py'
        language: system
        files: ^web_interface/backend/app/api/.*\.py$
        pass_filenames: false

      # 检查数据库迁移
      - id: check-migrations
        name: 检查数据库迁移
        description: 验证数据库迁移文件
        entry: bash -c 'cd web_interface/backend && python scripts/check_migrations.py'
        language: system
        files: ^web_interface/backend/alembic/versions/.*\.py$
        pass_filenames: false

# ==================== 全局配置 ====================
default_stages: [commit, push]
fail_fast: false
minimum_pre_commit_version: '3.0.0'

# ==================== CI 配置 ====================
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

# ==================== 使用说明 ====================
# 安装 pre-commit hooks: pre-commit install
# 手动运行所有 hooks: pre-commit run --all-files
# 跳过某个 hook: SKIP=hook-id git commit -m "message"
# 更新 hooks: pre-commit autoupdate