# ==================== TradeMaster Web Interface CI/CD Pipeline ====================
# GitHub Actions 持续集成和持续部署工作流

name: CI/CD Pipeline

on:
  # 触发条件
  push:
    branches: 
      - main
      - develop
      - 'feature/*'
      - 'hotfix/*'
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  
  pull_request:
    branches: 
      - main
      - develop
    paths-ignore:
      - '*.md' 
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  
  # 手动触发
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deploy environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - 'staging'
          - 'production'
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

# 环境变量
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  PNPM_VERSION: '8'

# 并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================== 变更检测 ====================
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docs: ${{ steps.changes.outputs.docs }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'web_interface/backend/**'
              - 'pyproject.toml'
              - '.github/workflows/ci.yml'
            frontend:
              - 'web_interface/frontend/**'
              - '.github/workflows/ci.yml'
            docs:
              - 'docs/**'
              - '*.md'
            docker:
              - 'web_interface/docker/**'
              - 'web_interface/docker-compose*.yml'
              - 'Dockerfile*'

  # ==================== 后端测试 ====================
  backend-test:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || github.event.inputs.skip_tests == 'false'
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: trademaster
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: trademaster_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            web_interface/backend/.venv
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('web_interface/backend/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-

      - name: Install dependencies
        working-directory: web_interface/backend
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        working-directory: web_interface/backend
        run: |
          flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Type check with mypy
        working-directory: web_interface/backend
        run: mypy app/ --ignore-missing-imports

      - name: Security check with bandit
        working-directory: web_interface/backend
        run: bandit -r app/ -ll

      - name: Check code formatting
        working-directory: web_interface/backend
        run: |
          black --check app/ tests/
          isort --check-only app/ tests/

      - name: Set up test environment
        working-directory: web_interface/backend
        env:
          DATABASE_URL: postgresql://trademaster:test_password@localhost:5432/trademaster_test
          REDIS_URL: redis://localhost:6379/1
          SECRET_KEY: test-secret-key-for-ci
          TESTING: 1
        run: |
          # 创建测试配置
          cp .env.example .env
          # 运行数据库迁移
          alembic upgrade head

      - name: Run tests
        working-directory: web_interface/backend
        env:
          DATABASE_URL: postgresql://trademaster:test_password@localhost:5432/trademaster_test
          REDIS_URL: redis://localhost:6379/1
          SECRET_KEY: test-secret-key-for-ci
          TESTING: 1
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: web_interface/backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results-py${{ matrix.python-version }}
          path: |
            web_interface/backend/htmlcov/
            web_interface/backend/coverage.xml
            web_interface/backend/pytest-report.xml

  # ==================== 前端测试 ====================
  frontend-test:
    name: 🌐 Frontend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || github.event.inputs.skip_tests == 'false'
    
    strategy:
      matrix:
        node-version: ['18', '20']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        working-directory: web_interface/frontend
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('web_interface/frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: web_interface/frontend
        run: pnpm install --frozen-lockfile

      - name: Type check
        working-directory: web_interface/frontend
        run: pnpm type-check

      - name: Lint
        working-directory: web_interface/frontend
        run: pnpm lint

      - name: Check code formatting
        working-directory: web_interface/frontend
        run: pnpm format:check

      - name: Run tests
        working-directory: web_interface/frontend
        run: pnpm test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: web_interface/frontend/coverage/coverage.xml
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results-node${{ matrix.node-version }}
          path: |
            web_interface/frontend/coverage/
            web_interface/frontend/test-results.xml

  # ==================== 构建测试 ====================
  build-test:
    name: 🔨 Build Test
    runs-on: ubuntu-latest
    needs: [changes, backend-test, frontend-test]
    if: always() && (needs.backend-test.result == 'success' || needs.backend-test.result == 'skipped') && (needs.frontend-test.result == 'success' || needs.frontend-test.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('web_interface/frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        working-directory: web_interface/frontend
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        working-directory: web_interface/frontend
        run: pnpm build

      - name: Analyze bundle size
        working-directory: web_interface/frontend
        run: pnpm analyze

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: |
            web_interface/frontend/dist/
            web_interface/frontend/dist/stats.html

  # ==================== Docker 构建 ====================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [changes, build-test]
    if: needs.changes.outputs.docker == 'true' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            trademaster/web-interface
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: web_interface
          file: web_interface/docker-compose.prod.yml
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ==================== 安全扫描 ====================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

  # ==================== 部署 ====================
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, build-test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://your-domain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          # 这里添加实际的部署脚本
          # 例如: kubectl apply, docker-compose up, 等

      - name: Health check
        run: |
          echo "🏥 Performing health check..."
          # 健康检查脚本
          curl -f https://your-domain.com/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            Deployment to production completed with status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

  # ==================== 通知 ====================
  notify:
    name: 📬 Notify
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, build-test, docker-build]
    if: always() && github.event_name != 'pull_request'

    steps:
      - name: Notify on success
        if: needs.backend-test.result == 'success' && needs.frontend-test.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            ✅ CI Pipeline passed successfully!
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            ❌ CI Pipeline failed!
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Check: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}